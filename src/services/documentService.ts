import apiClient from './api';
import type {
  DocumentResponse,
  DocumentsResponse,
  AnalyticsResponse,
  LegalModelsStatus
} from '../types/document';

export class DocumentService {
  // Upload document
  async uploadDocument(
    file: File,
    onProgress?: (progress: number) => void
  ): Promise<DocumentResponse> {
    return apiClient.uploadFile<DocumentResponse>(
      '/upload-document',
      file,
      onProgress
    );
  }

  // Get all documents
  async getDocuments(): Promise<DocumentsResponse> {
    return apiClient.get<DocumentsResponse>('/documents');
  }

  // Get specific document
  async getDocument(documentId: string): Promise<DocumentResponse> {
    return apiClient.get<DocumentResponse>(`/document/${documentId}`);
  }

  // Delete document
  async deleteDocument(documentId: string): Promise<{ success: boolean; message: string }> {
    return apiClient.delete<{ success: boolean; message: string }>(`/document/${documentId}`);
  }

  // Get suggested questions
  async getSuggestedQuestions(documentId: string): Promise<{ questions: string[]; document_id: string }> {
    return apiClient.get<{ questions: string[]; document_id: string }>(`/suggest-questions/${documentId}`);
  }

  // Get analytics
  async getAnalytics(): Promise<AnalyticsResponse> {
    return apiClient.get<AnalyticsResponse>('/analytics');
  }

  // Get legal models status
  async getLegalModelsStatus(): Promise<LegalModelsStatus> {
    return apiClient.get<LegalModelsStatus>('/legal-models/status');
  }

  // Export comprehensive report
  async exportReport(documentId: string): Promise<{
    report: string;
    filename: string;
    document_id: string;
    generated_at: string;
  }> {
    console.log('DocumentService: Starting export for document:', documentId);

    try {
      console.log('DocumentService: Attempting backend export endpoint');
      const result = await apiClient.get(`/export-report/${documentId}`);
      console.log('DocumentService: Backend export successful');
      return result;
    } catch (error: any) {
      // If the export endpoint doesn't exist, generate a basic report
      console.warn('DocumentService: Export endpoint not available, generating fallback report. Error:', error.message);

      try {
        // Get document details for basic report
        console.log('DocumentService: Fetching document details for fallback report');
        const document = await this.getDocument(documentId);
        const now = new Date().toISOString();

        console.log('DocumentService: Generating fallback report content');
        const basicReport = `
LEGAL DOCUMENT ANALYSIS REPORT
=============================

Document: ${document.filename}
Generated: ${new Date().toLocaleString()}
Document ID: ${documentId}

EXECUTIVE SUMMARY
${document.summary}

KEY TERMS & OBLIGATIONS
${document.key_clauses.map((clause, i) => `${i + 1}. ${clause}`).join('\n')}

RED FLAGS & CONCERNS
${document.red_flags.map((flag, i) => `⚠️ ${i + 1}. ${flag}`).join('\n')}

RISK ASSESSMENT
Overall Risk Score: ${Math.round(document.risk_score * 100)}%
AI Confidence: ${Math.round(document.confidence_score * 100)}%
Lawyer Consultation: ${document.lawyer_recommendation ? 'Recommended' : 'Not Required'}
Urgency Level: ${document.lawyer_urgency}

LEGAL ANALYSIS REASONING
${document.ai_confidence_reasoning}

RISK BREAKDOWN
Financial Risk: ${Math.round(document.risk_breakdown.financial_risk * 100)}%
Termination Risk: ${Math.round(document.risk_breakdown.termination_risk * 100)}%
Liability Risk: ${Math.round(document.risk_breakdown.liability_risk * 100)}%
Renewal Risk: ${Math.round(document.risk_breakdown.renewal_risk * 100)}%
Modification Risk: ${Math.round(document.risk_breakdown.modification_risk * 100)}%

LEGAL TERMINOLOGY DETECTED
${document.legal_terminology_found.join(', ')}

RISK INDICATORS FOUND
${document.risk_indicators.join(', ')}

${document.urgency_signals.length > 0 ? `
URGENCY SIGNALS
${document.urgency_signals.join(', ')}
` : ''}

SUGGESTED QUESTIONS
${document.suggested_questions.map((q, i) => `${i + 1}. ${q}`).join('\n')}

---
Generated by AI Legal Doc Explainer v8.0.0
Legal AI System powered by Legal-BERT and Gemini AI
Report generated on ${new Date().toLocaleString()}
        `.trim();

        const result = {
          report: basicReport,
          filename: `legal_analysis_${document.filename.replace('.pdf', '')}_${new Date().toISOString().split('T')[0]}.txt`,
          document_id: documentId,
          generated_at: now
        };

        console.log('DocumentService: Fallback report generated successfully');
        return result;
      } catch (fallbackError: any) {
        console.error('DocumentService: Fallback report generation failed:', fallbackError);
        throw new Error(`Export failed: ${fallbackError.message}`);
      }
    }
  }

  // Batch upload documents
  async batchUpload(files: File[]): Promise<{
    results: Array<{
      filename: string;
      status: 'success' | 'error';
      document_id?: string;
      risk_score?: number;
      summary?: string;
      error?: string;
    }>;
    total_files: number;
    successful_uploads: number;
    failed_uploads: number;
  }> {
    const formData = new FormData();
    files.forEach(file => {
      formData.append('files', file);
    });

    return apiClient.post('/batch-upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  }

  // Compare documents
  async compareDocuments(documentIds: string[]): Promise<{
    comparison_summary: string;
    key_differences: string[];
    risk_comparison: Record<string, number>;
    recommendations: string[];
  }> {
    return apiClient.post('/compare-documents', { document_ids: documentIds });
  }
}

// Create and export singleton instance
export const documentService = new DocumentService();
export default documentService;